install.packages("~/Downloads/SDSFoundations_1.1.tgz", repos = NULL, type = .Platform$pkgType)
Repatriation.Arrival.Survey...1.16.2020 <- read.csv("~/Downloads/Repatriation Arrival Survey - 1-16-2020.csv", header=FALSE, comment.char="#")
View(Repatriation.Arrival.Survey...1.16.2020)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
houses = read.csv("houses.csv")
library(magrittr)
library(dplyr)
library(jtools)
library(ggplot2)
library(devtools)
houses <- houses %>% filter(Total_sale_Price != 0)
houses <- houses %>% filter(Total_Sale_Date != "")
houses <- houses %>% filter(Deeded_Acreage != 0)
houses <- houses %>% filter(Land_classification == "R")
#encoding treatment and control for township
houses$treatment = houses$Township
houses$treatment[houses$treatment == 18] <- "t"
houses$treatment[houses$treatment == 7] <- "c"
houses$treatment = as.character(houses$treatment)
#summary(houses$saleprice)
#creating the year column
houses$yearintervention = as.character(houses$Total_Sale_Date)
library(stringr)
houses$yearintervention = str_sub(houses$yearintervention,-2,-1)
as.numeric(houses$yearintervention)
#encoding before and after for year
houses_final <- subset(houses, treatment == "t" | treatment == "c")
houses_final$saleprice = as.numeric(gsub(",","",houses_final$Total_sale_Price))
houses_data = houses_final %>%
group_by(yearintervention, treatment) %>%
summarise(mean_houseprice = mean(saleprice))
houses_data
houses_data$yearintervention = as.numeric(houses_data$yearintervention)
#plot of mean house prices before treatment
houses_data <- houses_data %>% filter(yearintervention>08 && yearintervention<15)
#houses_data
p <- ggplot(data= houses_data, aes(x= yearintervention, y= mean_houseprice, group= treatment)) +
geom_line(aes(linetype=treatment, color=treatment))+
geom_point(aes(color=treatment))
p + ggtitle("Mean House Prices Before Treatment") +
xlab("Year") + ylab("Mean House Price") + scale_color_discrete(name ="School Districts", breaks=c("c", "t"), labels=c("Sanderson", "Athens Drive")) + scale_shape_discrete(name ="School Districts", breaks=c("c", "t"), labels=c("Sanderson", "Athens Drive"))
#houses_final$yearintervention[houses_final$yearintervention == 13| houses_final$yearintervention == 14 | houses_final$yearintervention == 15] <- "0"
#houses_final$yearintervention[houses_final$yearintervention == 17| houses_final$yearintervention == 16] <- "1"
houses_final$yearintervention[houses_final$yearintervention == 13| houses_final$yearintervention == 14] <- "0"
houses_final$yearintervention[houses_final$yearintervention == 17| houses_final$yearintervention == 16 | houses_final$yearintervention == 15 ] <- "1"
houses_ff <- subset(houses_final, yearintervention == "0" | yearintervention == "1")
houses_ff$yearintervention = as.numeric(houses_ff$yearintervention)
#cleaning the data for regression
houses_ff <- houses_ff %>% filter(HEATED_AREA != 0)
houses_ff$logheatarea = log(houses_ff$HEATED_AREA, exp(1))
#log values
houses_ff$saleprice = as.numeric(gsub(",","",houses_ff$Total_sale_Price))
houses_ff$logsaleprice = log(houses_ff$saleprice, exp(1))
houses_ff$logacreage = log(houses_ff$Deeded_Acreage, exp(1))
linreg2 = lm(logsaleprice ~ yearintervention + treatment + yearintervention * treatment + logacreage + Effective_year + logheatarea,data = houses_ff)
summary(linreg2)
summ(linreg2)
plot_summs(linreg2, fit2, scale = TRUE)
summ(linreg2)
#plot_summs(linreg2, fit2, scale = TRUE)
houses_ff %>%
group_by(treatment, yearintervention) %>%
summarise(mean_houseprice = mean(saleprice))
#summarise(ncount = n())
mean(houses_ff$saleprice)
sd(houses_ff$saleprice)
houses_ff %>%
group_by(treatment, yearintervention) %>%
summarise(mean_houseprice = mean(saleprice))
#summarise(ncount = n())
mean(houses_ff$saleprice)
sd(houses_ff$saleprice)
summary(houses_ff$saleprice)
#houses_final$yearintervention[houses_final$yearintervention == 13| houses_final$yearintervention == 14 | houses_final$yearintervention == 15] <- "0"
#houses_final$yearintervention[houses_final$yearintervention == 17| houses_final$yearintervention == 16] <- "1"
houses_final$yearintervention[ houses_final$yearintervention == 14] <- "0"
houses_final$yearintervention[ houses_final$yearintervention == 16] <- "1"
houses_ff <- subset(houses_final, yearintervention == "0" | yearintervention == "1")
houses_ff$yearintervention = as.numeric(houses_ff$yearintervention)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
houses = read.csv("houses.csv")
library(magrittr)
library(dplyr)
library(jtools)
library(ggplot2)
library(devtools)
houses <- houses %>% filter(Total_sale_Price != 0)
houses <- houses %>% filter(Total_Sale_Date != "")
houses <- houses %>% filter(Deeded_Acreage != 0)
houses <- houses %>% filter(Land_classification == "R")
#encoding treatment and control for township
houses$treatment = houses$Township
houses$treatment[houses$treatment == 18] <- "t"
houses$treatment[houses$treatment == 7] <- "c"
houses$treatment = as.character(houses$treatment)
#summary(houses$saleprice)
#creating the year column
houses$yearintervention = as.character(houses$Total_Sale_Date)
library(stringr)
houses$yearintervention = str_sub(houses$yearintervention,-2,-1)
as.numeric(houses$yearintervention)
#encoding before and after for year
houses_final <- subset(houses, treatment == "t" | treatment == "c")
houses_final$saleprice = as.numeric(gsub(",","",houses_final$Total_sale_Price))
houses_data = houses_final %>%
group_by(yearintervention, treatment) %>%
summarise(mean_houseprice = mean(saleprice))
houses_data
houses_data$yearintervention = as.numeric(houses_data$yearintervention)
#plot of mean house prices before treatment
houses_data <- houses_data %>% filter(yearintervention>08 && yearintervention<15)
#houses_data
p <- ggplot(data= houses_data, aes(x= yearintervention, y= mean_houseprice, group= treatment)) +
geom_line(aes(linetype=treatment, color=treatment))+
geom_point(aes(color=treatment))
p + ggtitle("Mean House Prices Before Treatment") +
xlab("Year") + ylab("Mean House Price") + scale_color_discrete(name ="School Districts", breaks=c("c", "t"), labels=c("Sanderson", "Athens Drive")) + scale_shape_discrete(name ="School Districts", breaks=c("c", "t"), labels=c("Sanderson", "Athens Drive"))
#houses_final$yearintervention[houses_final$yearintervention == 13| houses_final$yearintervention == 14 | houses_final$yearintervention == 15] <- "0"
#houses_final$yearintervention[houses_final$yearintervention == 17| houses_final$yearintervention == 16] <- "1"
houses_final$yearintervention[ houses_final$yearintervention == 14] <- "0"
houses_final$yearintervention[ houses_final$yearintervention == 16] <- "1"
houses_ff <- subset(houses_final, yearintervention == "0" | yearintervention == "1")
houses_ff$yearintervention = as.numeric(houses_ff$yearintervention)
#cleaning the data for regression
houses_ff <- houses_ff %>% filter(HEATED_AREA != 0)
houses_ff$logheatarea = log(houses_ff$HEATED_AREA, exp(1))
#log values
houses_ff$saleprice = as.numeric(gsub(",","",houses_ff$Total_sale_Price))
houses_ff$logsaleprice = log(houses_ff$saleprice, exp(1))
houses_ff$logacreage = log(houses_ff$Deeded_Acreage, exp(1))
linreg2 = lm(logsaleprice ~ yearintervention + treatment + yearintervention * treatment + logacreage + Effective_year + logheatarea,data = houses_ff)
summary(linreg2)
summ(linreg2)
#plot_summs(linreg2, fit2, scale = TRUE)
#linreg2 = lm(logsaleprice ~ yearintervention + treatment + yearintervention * treatment + logacreage + Effective_year + logheatarea,data = houses_ff)
linreg2 = lm(saleprice ~ yearintervention + treatment + yearintervention * treatment + HEATED_AREA + Effective_year + Deeded_Acreage,data = houses_ff)
summary(linreg2)
devtools::install_github("hrecht/censusapi")
library(dplyr)
install.packages("rsconnect")
library(rsconnect)
library(ggplot2)
library(tidyr)
library(stringr)
install.packages("stringr")
install.packages("stringr")
install.packages("tidyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
aydata <- read.csv("FP2020/AYPopData.csv")
View(aydata)
View(aydata)
aydata <- read.csv("FP2020/AYPopData.csv")
View(aydata)
aydata <- read.csv("FP2020/AYPopData.csv")
View(aydata)
aydata$Women.of.reproductive.age..15.49..in.2019 <- as.numeric(aydata$Women.of.reproductive.age..15.49..in.2019)
aydata$Women.of.reproductive.age..15.49..in.2019 <- as.numeric(as.character(aydata$Women.of.reproductive.age..15.49..in.2019))
aydata <- read.csv("FP2020/AYPopData.csv")
aydata$Women.of.reproductive.age..15.49..in.2019 <- as.numeric(as.character(aydata$Women.of.reproductive.age..15.49..in.2019))
View(aydata)
aydata <- read.csv("FP2020/AYPopData.csv")
View(aydata)
aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
aydata$Women.of.reproductive.age..15.49..in.2019 <- as.numeric(aydata$Women.of.reproductive.age..15.49..in.2019)
aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
aydata$Women.of.reproductive.age..15.49..in.2019 <- as.integer(aydata$Women.of.reproductive.age..15.49..in.2019)
myaydata <- read.csv("MyAYData.csv", stringsAsFactors = FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
View(myaydata)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
View(myaydata)
shiny::runApp('FP2020/AY_Data_App')
runApp('FP2020/samplewithtutorial')
runApp('FP2020/AY_Data_App')
View(aydata)
View(aydata)
runApp('FP2020/AY_Data_App')
runApp('FP2020/AY_Data_App')
runApp('FP2020/AY_Data_App')
runApp('FP2020/AY_Data_App')
aydata <- read.csv("FP2020/AYPopData", stringsAsFactors=FALSE)
aydata <- read.csv("FP2020/AYPopData", stringsAsFactors=FALSE)
aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
runApp('FP2020/AY_Data_App')
aydata <- read.csv("C:/Users/mabellezhang/FP2020/AYPopData.csv/", stringsAsFactors=FALSE)
#aydata <- read.csv("C:/Users/mabellezhang/FP2020/AYPopData.csv/", stringsAsFactors=FALSE)
aydata <- read.csv("FP2020/AYPopData.csv/", stringsAsFactors=FALSE)
aydata <- read.csv("C:/Users/mabellezhang/FP2020/AYPopData.csv", stringsAsFactors=FALSE)
aydata <- read.csv("Users/mabellezhang/FP2020/AYPopData.csv", stringsAsFactors=FALSE)
aydata <- read.csv("mabellezhang/FP2020/AYPopData.csv", stringsAsFactors=FALSE)
aydata <- read.csv("mabellezhang/FP2020", stringsAsFactors=FALSE)
aydata <- read.csv("/mabellezhang/FP2020/AYPopData.csv", stringsAsFactors=FALSE)
aydata <- read.csv("mabellezhang/FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("mabellezhang/FP2020/MyAYData.csv/", stringsAsFactors = FALSE)
library(shiny)
library(dplyr)
library(rsconnect)
library(ggplot2)
library(tidyr)
library(stringr)
aydata <- read.csv("~/mabellezhang/FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("~/mabellezhang/FP2020/MyAYData.csv/", stringsAsFactors = FALSE)
setwd("~/mabellezhang/FP2020")
aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv/", stringsAsFactors = FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
runApp('FP2020/AY_Data_App')
runApp('FP2020')
aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
runApp('FP2020')
library(readxl)
MyAYData <- read_excel("FP2020/MyAYData.xlsx")
View(MyAYData)
View(MyAYData)
runApp('FP2020')
#aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
#myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
MyAYData <- load(MyAYData)
#aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
#myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
data <- load(MyAYData)
#aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
runApp('FP2020')
View(myaydata)
#aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
#aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
#aydata <- read.csv("FP2020/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/MyAYData.csv", stringsAsFactors = FALSE)
View(myaydata)
run(myaydata)
#aydata <- read.csv("Data/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("Data/MyAYData.csv", stringsAsFactors = FALSE)
#aydata <- read.csv("Data/AYPopData.csv", stringsAsFactors=FALSE)
myaydata <- read.csv("FP2020/Data/MyAYData.csv", stringsAsFactors = FALSE)
runApp('FP2020')
runApp('FP2020')
runApp('FP2020')
library(shiny)
library(dplyr)
library(rsconnect)
library(ggplot2)
library(tidyr)
library(stringr)
myaydata <- read.csv("AY_Data_App/ay/Data/MyAYData.csv", stringsAsFactors = FALSE)
runApp('AY_Data_App/ay')
myaydata <- read.csv("ay/Data/MyAYData.csv", stringsAsFactors = FALSE)
myaydata <- read.csv("AY_Data_App/ay/Data/MyAYData.csv", stringsAsFactors = FALSE)
runApp('AY_Data_App/ay')
myaydata <- read.csv("Data/MyAYData.csv", stringsAsFactors = FALSE)
myaydata <- read.csv("ay/Data/MyAYData.csv", stringsAsFactors = FALSE)
myaydata <- read.csv("Data/MyAYData.csv", stringsAsFactors = FALSE)
myaydata <- read.csv("./Data/MyAYData.csv", stringsAsFactors = FALSE)
myaydata <- read.csv("./AY_Data_App/ay/Data/MyAYData.csv", stringsAsFactors = FALSE)
runApp('AY_Data_App/ay')
shiny::runApp('AY_Data_App/ay')
runApp('AY_Data_App/ay')
shiny::runApp('AY_Data_App/ay')
runApp('AY_Data_App/ay')
runApp('AY_Data_App/ay')
setwd("~/")
shiny::runApp('AY_Data_App/AYData/ay')
View(myaydata)
View(myaydata)
View(myaydata)
View(myaydata)
View(myaydata)
View(myaydata)
setwd("~/")
shiny::runApp('AY_Data_App/AYData/ay')
getwd()
setwd("~/")
setwd("~/AY_Data_App")
runApp('AYData/ay')
kle_age <- read_excel("Data/CleanedAYData.xlsx", sheet = "KLEAgeEvents")
setwd("~/AY_Data_App/AYData/ay")
kle_age <- read_excel("Data/CleanedAYData.xlsx", sheet = "KLEAgeEvents")
View(kle_age)
runApp()
install.packages("gt")
install.packages("gt")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
df <- data.frame("Country" = c("India","India", "India"), "Source" = c("DHS","DHS", "DHS"), "Event" = c("First Marriage", "First Sex", "First Birth"), "Age" = c(20, 21, 22))
status_levels <- c("First Marriage", "First Sex", "First Birth")
status_colors <- c("#0070C0", "#00B050", "#FFC000")
df$status <- factor(df$Event, levels=status_levels, ordered=TRUE)
line_pos <- data.frame("Event"= df$Event,"Position" = c(-0.5, -0.5, -0.5), "Directions" = c(-1, -1, -1), "Text" = c(-0.25, -0.25, -0.25))
df <- merge(x=df, y=line_pos, by = "Event", all = TRUE)
age_buffer <- 2
age_range <- seq(min(df$Age) - (age_buffer), max(df$Age) + (age_buffer), by=1)
age_df <- data.frame(age_range)
timeline_plot<- ggplot(df, aes(x=Age,y=0, label=Event))
timeline_plot<- timeline_plot +
theme_classic() +
labs(col="Events")
timeline_plot <- timeline_plot + scale_color_manual( values = status_colors, labels = status_levels, drop = FALSE)
timeline_plot
timeline_plot<- timeline_plot + geom_hline(yintercept=0, color = "black", size=0.3)
timeline_plot
# Plot scatter points at zero and date
timeline_plot<-timeline_plot + geom_point(aes(y=0), size=3)
timeline_plot
# Don't show axes, appropriately position legend
timeline_plot<- timeline_plot + theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)
# Show text for each month
timeline_plot<- timeline_plot +
geom_text(data= age_df, aes(x = age_range , y= - 0.01, label = age_range), size=1.5, vjust=0.5, color='black')
timeline_plot
# Show text for each event
timeline_plot <- timeline_plot + geom_text(aes (x = Age, y = -0.5, label = Event), size = 2.5) + geom_text(aes (x = Age, y = -0.1, label = Age), size = 2.5)
timeline_plot
timeline_plot + ggtitle("Key Life Events")
timeline_plot
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(gt)
kle_marriage <- read_excel("Data/CleanedAYData.xlsx", sheet = "KLEMarriage")
kle_marriage <- read_excel("Data/CleanedAYData.xlsx", sheet = "KLEMarriage")
res3 <- kle_marriage %>% filter(kle_marriage$Country == "India")
View(res3)
res[1,] <- "Age Group"
res3[1,] <- "Age Group"
runApp()
runApp()
runApp()
runApp()
